##DFS

Khởi tạo một Stack tên qu
xác định một điểm bắt đầu của tham số vấn đề được đưa vào và truyền vào trong stack qu
Khởi tạo một mảng rỗng những node đã đi qua tên là Traveled
Vòng lặp while nếu stack không phải rỗng
    sẽ bỏ node hiện tại và pathcost của node hiện tại vào stack qu
    nếu tìm được goal của vấn đề thì vòng lặp sẽ break và ngưng tại đó

    nếu vẫn chưa tìm được goal thì sẽ tiếp tục tìm phần tử ngay sau node hiện tại bằng cách gọi hàm getSuccessors và truyển tham số là node hiện tại.
    Đặt ra một vòng lặp for với phần tử ngay sau node vừa tìm, vì hàm getSuccessors sẽ trả về một list có chứa phần tử tiếp theo, action, và stepcost (successor,action,stepCost)
    nên vòng lặp for này sẽ lấy phần tử đứng đầu trong list là [0] là chính phần tử đó để so với mảng Traveled (chứa những phần tử đã đi qua) kiểm tra xem successor đã được đi qua chưa,
    nếu chưa sẽ append vào mảng và đồng thời đẩy vào stack qu đã tạo lúc đầu.



 ##UCS

 Khởi tạo 1 Priority Queue tên là PQ
 Truyền vào trong Queue vị trí hiện tại của pacman, các node có thể đi được, độ dài đường đi sẽ đi
 Tạo 1 list rỗng để lưu các node đã đi qua
 Nếu PQ vẫn còn data (chưa đến được đích) thì PQ sẽ liên tục lấy ra phần tử đầu của mình để kiểm tra các node có thể đi tới và sau đó cập nhật lại giá trị quảng đường và liên tục tìm cho đến khi trong PQ không còn data
 Nếu không tìm thấy Path, UCS sẽ trả về mảng rỗng

##A* null heuristic
Khởi tạo một PQ tên là fringe để lưu các giá trị và độ ưu tiên của chúng trong hàng đợi
tạo 1 list expanded dùng để lưu các node đi đã đi qua
Nếu vòng trong hàng đợi PQ vẫn còn chứa các node thì sẽ lần lượt lấy các node đó ra và các node tiếp theo có thể di chuyển tới được
    Nếu tìm thấy goal thì sẽ dừng vòng lặp và đẩy đường đi của các node ra bên ngoài. Nếu không, fringe sẽ tiếp tục lưu đường đi của các node có thể đi tiếp và tiếp tục tìm đường
    Trong trường hợp không tìm thấy được đường đi, A* null heuristic sẽ trả về mảng rỗng

